// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0--rc1
// source: template/v1/meeting.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Meeting_CreateMeeting_FullMethodName = "/api.template.v1.Meeting/CreateMeeting"
	Meeting_UpdateMeeting_FullMethodName = "/api.template.v1.Meeting/UpdateMeeting"
	Meeting_DeleteMeeting_FullMethodName = "/api.template.v1.Meeting/DeleteMeeting"
	Meeting_GetMeeting_FullMethodName    = "/api.template.v1.Meeting/GetMeeting"
	Meeting_ListMeeting_FullMethodName   = "/api.template.v1.Meeting/ListMeeting"
)

// MeetingClient is the client API for Meeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetingClient interface {
	CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error)
	UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error)
	DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error)
	GetMeeting(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*GetMeetingReply, error)
	ListMeeting(ctx context.Context, in *ListMeetingRequest, opts ...grpc.CallOption) (*ListMeetingReply, error)
}

type meetingClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingClient(cc grpc.ClientConnInterface) MeetingClient {
	return &meetingClient{cc}
}

func (c *meetingClient) CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Meeting_CreateMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) UpdateMeeting(ctx context.Context, in *UpdateMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Meeting_UpdateMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) DeleteMeeting(ctx context.Context, in *DeleteMeetingRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, Meeting_DeleteMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) GetMeeting(ctx context.Context, in *GetMeetingRequest, opts ...grpc.CallOption) (*GetMeetingReply, error) {
	out := new(GetMeetingReply)
	err := c.cc.Invoke(ctx, Meeting_GetMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingClient) ListMeeting(ctx context.Context, in *ListMeetingRequest, opts ...grpc.CallOption) (*ListMeetingReply, error) {
	out := new(ListMeetingReply)
	err := c.cc.Invoke(ctx, Meeting_ListMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServer is the server API for Meeting service.
// All implementations must embed UnimplementedMeetingServer
// for forward compatibility
type MeetingServer interface {
	CreateMeeting(context.Context, *CreateMeetingRequest) (*BoolReply, error)
	UpdateMeeting(context.Context, *UpdateMeetingRequest) (*BoolReply, error)
	DeleteMeeting(context.Context, *DeleteMeetingRequest) (*BoolReply, error)
	GetMeeting(context.Context, *GetMeetingRequest) (*GetMeetingReply, error)
	ListMeeting(context.Context, *ListMeetingRequest) (*ListMeetingReply, error)
	mustEmbedUnimplementedMeetingServer()
}

// UnimplementedMeetingServer must be embedded to have forward compatible implementations.
type UnimplementedMeetingServer struct {
}

func (UnimplementedMeetingServer) CreateMeeting(context.Context, *CreateMeetingRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedMeetingServer) UpdateMeeting(context.Context, *UpdateMeetingRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeeting not implemented")
}
func (UnimplementedMeetingServer) DeleteMeeting(context.Context, *DeleteMeetingRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeeting not implemented")
}
func (UnimplementedMeetingServer) GetMeeting(context.Context, *GetMeetingRequest) (*GetMeetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeeting not implemented")
}
func (UnimplementedMeetingServer) ListMeeting(context.Context, *ListMeetingRequest) (*ListMeetingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeeting not implemented")
}
func (UnimplementedMeetingServer) mustEmbedUnimplementedMeetingServer() {}

// UnsafeMeetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServer will
// result in compilation errors.
type UnsafeMeetingServer interface {
	mustEmbedUnimplementedMeetingServer()
}

func RegisterMeetingServer(s grpc.ServiceRegistrar, srv MeetingServer) {
	s.RegisterService(&Meeting_ServiceDesc, srv)
}

func _Meeting_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_CreateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).CreateMeeting(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_UpdateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).UpdateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_UpdateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).UpdateMeeting(ctx, req.(*UpdateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_DeleteMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).DeleteMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_DeleteMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).DeleteMeeting(ctx, req.(*DeleteMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_GetMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).GetMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_GetMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).GetMeeting(ctx, req.(*GetMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meeting_ListMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServer).ListMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meeting_ListMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServer).ListMeeting(ctx, req.(*ListMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Meeting_ServiceDesc is the grpc.ServiceDesc for Meeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.template.v1.Meeting",
	HandlerType: (*MeetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeeting",
			Handler:    _Meeting_CreateMeeting_Handler,
		},
		{
			MethodName: "UpdateMeeting",
			Handler:    _Meeting_UpdateMeeting_Handler,
		},
		{
			MethodName: "DeleteMeeting",
			Handler:    _Meeting_DeleteMeeting_Handler,
		},
		{
			MethodName: "GetMeeting",
			Handler:    _Meeting_GetMeeting_Handler,
		},
		{
			MethodName: "ListMeeting",
			Handler:    _Meeting_ListMeeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template/v1/meeting.proto",
}
